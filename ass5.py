# -*- coding: utf-8 -*-
"""ASS5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sVCX_EwkiEIH8iFfEpG_bRD5j7EZg0lp
"""

def is_safe(board, row, col, n):
    for i in range(col):
        if board[row][i] == 1:
            return False

    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    for i, j in zip(range(row, n, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens(board, col, n):
    if col >= n:
        return True

    for i in range(n):
        if is_safe(board, i, col, n):
            board[i][col] = 1
            if solve_n_queens(board, col + 1, n):
                return True
            board[i][col] = 0
    return False


def print_board(board):
    for row in board:
        line = ""
        for field in row:
            line += "Q" if field else "."
        print(line)


n = int(input("Enter the size of the board (N): "))
initial_row = int(input("Enter the initial row position of the 1st queen (0-based index): "))
initial_col = int(input("Enter the initial column position of the 1st queen (0-based index): "))

board = [[0 for _ in range(n)] for _ in range(n)]
board[initial_row][initial_col] = 1

if not solve_n_queens(board, initial_col + 1, n):
  print("No solution exists!")
else:
  print("One of the solutions is:")
  print_board(board)