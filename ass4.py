# -*- coding: utf-8 -*-
"""ASS4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14ofbZwc51mfyDrYMzyer3A5BBlyL3sxy
"""

import numpy as np
import tensorflow as tf
import pandas as pd

import matplotlib.pyplot as plt
from keras.datasets import mnist
import keras
from sklearn.metrics import f1_score

data = pd.read_csv("/content/drive/MyDrive/AI LAB/insurance_data.csv")

data

x = data.iloc[:,0:2]
y=data['bought_insurance']
x = np.asarray(x)
y = np.asarray(y)

weights  = [0.5,1]
bias = [0,0.5]
l = 0.001
epochs = 5000

for epoch in range(epochs):

  #Forward pass
  weightedSum = np.dot(x,weights)
  sum = weightedSum + np.dot(x,bias)
  predOutput = 1/(1+np.exp(-sum))

  if(predOutput != )

  #Logloss
  loss = -np.mean(y*np.log(predOutput) + (1-y)*np.log(1-predOutput))

  #Back Prapogation
  dloss_doutput = 2*(predOutput - y)/len(y)
  doutput_dweight = x.T
  dloss_dweight = np.dot(doutput_dweight,dloss_doutput)

  dloss_dbias = np.sum(dloss_doutput , axis = 0)

  #update
  weights -= l * dloss_dweight
  bias -= l * dloss_dbias

  #print
  if epoch %100 == 0:
    print(f"Epoch {epoch}: Loss = {loss:.4f}")

print(f"Weights: {weights[0]},{weights[1]}")
print(f"Bias: {bias[0]},{bias[1]}")

